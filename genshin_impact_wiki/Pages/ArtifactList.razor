@page "/artifacts"
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Artifacts</PageTitle>

<h1>Artifact List</h1>

@if (loading)
{
    <p>LOADING. . .</p>
}
@if (error)
{
    <p>ERROR!</p>
    <p>@errormsg</p>
}
@if (!loading && !error)
{
    @foreach (var artifact in artifacts!)
    {
        <div class="card">
    <img src="https://api.genshin.dev/artifacts/@cureName(artifact.name)/circlet-of-logos" class="card-img-top"
        alt="artifact icon">
    <div class="card-body">
        <h5 class="card-title">@artifact.name</h5>
        Rarity: @artifact.rarity*<br />
        @if (checkArtifact(artifact.name!))
                {
                    <p>
                        2p: @artifact.two_piece_bonus<br />
                        4p: @artifact.four_piece_bonus<br />
                    </p>
                }
                else
                {
                    <p>
                        1p: @artifact.one_piece_bonus<br />
                    </p>
                }
            </div>
        </div>
    }
}

<style>
    .card {
        display: flex;
        flex-direction: row;
        gap: 1em;
        margin-top: 1em;
    }

    .card-img-top {
        width: 9em;
        height: 9em;
    }
</style>

@code {
    private Artifact[]? artifacts;
    private bool loading = false;
    private bool error = false;
    private string errormsg = "";
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        error = false;
        try
        {
            var response = await Http.GetStringAsync("https://api.genshin.dev/artifacts/all");
            artifacts = JsonSerializer.Deserialize<Artifact[]>(response);
        }
        catch (Exception e)
        {
            errormsg = "" + e;
            error = true;
        }
        finally
        {
            loading = false;
        }
        await base.OnInitializedAsync();
    }

    private Boolean checkArtifact(string? name)
    {
        switch (name)
        {
            case "Prayers for Destiny":
                return false;
            case "Prayers for Illumination":
                return false;
            case "Prayers for Wisdom":
                return false;
            case "Prayers to Springtime":
                return false;
            case "Sacrifieur to the Firmament":
                return false;
            default:
                return true;
        }
    }

    private String cureName(string? name)
    {
        name = name!.ToLower();
        name = name.Replace(" ", "-");
        name = name.Replace("'", "-");
        return name;
    }
}
